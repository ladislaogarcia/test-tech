#!/usr/bin/env node
/* eslint-disable no-undef */

/**
 * Module dependencies.
 */

var envFilePath = '../.env';
var config = require('dotenv').config({path: envFilePath}).parsed || {};
var app = require('../app');
var debug = require('debug')('ing-tech-back:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.API_PORT || '3000');

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

app.set('port', port);
app.database.on('DataBase.CONNECTED', () => {
    if( app.get('serverInitialized') ) return;
    server.listen(port, () => {
        app.set('serverInitialized', true);
    });
    server.on('error', onError);
    server.on('listening', onListening);
    process.on('SIGTERM', () => {
        server.close(() => {
            app.set('serverInitialized', false);
            console.log(`Http server in port ${port} closed.`);
        });
    });
});
app.database.connect();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    if (error.syscall !== 'listen') {
        throw error;
    }

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
